{
  
    
        "post0": {
            "title": "Week of 05-08, AP Week 2",
            "content": "Plans Week 33 . Monday: AP Exam Day | Tuesday: Programming Labs, and Projects: Stack from ArrayList and Queues | Wednesday: | Thursday: | Friday: | . Look ahead .",
            "url": "https://jiya-sav.github.io/ourshiny/points/33",
            "relUrl": "/points/33",
            "date": " • May 8, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Week of 05-01, AP Week 1",
            "content": "Plans Week 32 . Monday: AP Review | Tuesday: AP Review | Wednesday: AP Review | Thursday: AP Review | Friday: AP MCQ 2021 Practice Exam | . Look ahead . AP Exam on Monday 5/8 .",
            "url": "https://jiya-sav.github.io/ourshiny/points/32",
            "relUrl": "/points/32",
            "date": " • May 1, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Developing Frontend/Backend Application Student Copy",
            "content": "Frontend and Backend . Fill in the blanks and add any extra notes . Installing Conda Scripts . type conda --version and take a screen shot as proof that you have it installed . Github/Fastpages Setup . Buiding requirements and pull requests in GitHub . Overview . Fetching . Fetching means getting retrieving data from a server (self-created, or third party), like a website or database. . Lecture Question: . What language do we most commonly use to fetch? . When fetching data you can manipulate it with a function in javascript, often prompted by a user input or some other indication (like a button). However, you must first specify the location from which the data should be retrieved. . Below this is defined as the const url. . code block . Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . . I will explain the image and probably refine the diagram to be more detailed . In Our Project . I implement more parts of our project in more detail, this is just an example of a block of code used in our project we might provide | . const response = fetch(url, { method: &quot;GET&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, mode: &quot;cors&quot;, cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39; // include, *same-origin, omit }).then(response=&gt; response.json().then( data =&gt; { console.log(data); data.forEach((item) =&gt; { console.log(&#39;ID: &#39; + item.id); console.log(&#39;Happy: &#39; + item.happy); console.log(&#39;Sad: &#39; + item.sad); console.log(&#39;Rage: &#39; + item.rage); console.log(&#39;Indian: &#39; + item.indian); console.log(&#39;Song: &#39; + item.song); . As we can see hear we are fetching from an API and... .",
            "url": "https://jiya-sav.github.io/ourshiny/fastpages/jupyter/2023/04/25/Frontend2BackendStudent.html",
            "relUrl": "/fastpages/jupyter/2023/04/25/Frontend2BackendStudent.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Guide To Making A New Repo",
            "content": "Duplicate APCSP, and use it as template for your own repo . | . Name your repo and include all branches before clicking the green create button. . | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. . | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. . | . Navigate to this link. Replace the section of the link highlighted in blue with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link highlighted in yellow with your repository name that you just made. . | https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions . . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the “—BEGIN RSA PRIVATE KEY—” and “–END RSA PRIVATE KEY—” portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. . | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. . | https://github.com/yourgithubname/yourrepositoryname/settings/keys . . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. . | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. . | Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. . You can monitor the status of your site in the GitHub Pages section of your repository settings. . Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! .",
            "url": "https://jiya-sav.github.io/ourshiny/2023/04/24/Guide-to-making-a-new-repo.html",
            "relUrl": "/2023/04/24/Guide-to-making-a-new-repo.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Conda Scripts Lesson",
            "content": "For Windows . After you&#39;ve installed VSCode using WSL, install Anaconda on WSL. . Anaconda is like a big tool box for your computer, it has tools and libraries that you might need for data analysis, programming, and computing. Conda is a tool that helps you manage these tools inside Anaconda. It lets you install, update, delete, and organize packages and materials. Anaconda Python packages include pandas, numpy, sqlite, jupyter, bash, and other kernels. Conda script tells Conda what tools and materials you need and how to install them in your Anaconda toolbox. . Type these commands in powershell or terminal . PS C: Users UserName&gt; wsl # Windows prompt to WSL command $ cd /tmp # used to store temporary files $ wget https://repo.anaconda.com/archive/Anaconda3-2023.03-Linux-x86_64.sh # downloadable file $ chmod +x Anaconda3-2022.05-Linux-x86_64.sh # chmod (change mode command) changes permissions for a file or directory # Answer yes to all the prompts $ ./Anaconda3-2022.05-Linux-x86_64.sh . Start a new WSL Command or Powershell. Now the WSL prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. The base prefix indicates that you are running inside the conda/anaconda environment. The command &quot;conda deactivate&quot; should bring you back. . PS C: Users ShayM&gt; wsl # Windows prompt (base) shay@MSI:/mnt/c/Users/ShayM$ cd ~ # WSL prompt (base) shay@MSI:~$ # WSL home, best place to install files # you can check your conda versions (base) id:~$ conda --version . . For MacOS . Python2 install on MacOS . Install Python2&gt; VSCode install on MacOS. | Install VSCode&gt; Anaconda install on MacOS. | Download for MacOS:Anaconda- Run Install: Answer yes to questions Homebrew install on MacOS | Homebrew is a tool that helps you easily install and manage software on your Mac. Think of it like a virtual store for your computer where you can browse, download and install a variety of useful programs and tools. | Copy and Paste to Install from Terminal Homebrew - Copy bash ... curl ... command using copy box on website Launch terminal from search bar | Paste bash ... curl ... command into Terminal ... | Make sure command starts, this should provide feedback/output in terminal and could take a long time, like 10-min, there could be a prompt in the middle, at about 5-minutes. Follow any on screen instructions provided in terminal output to finish. | . | Homebrew installs a tool called &quot;brew&quot; which helps add and manage developer packages on MacOS. | . Start a new WSL terminal. Now the terminal prompt should be prefixed with (base) from Anaconda install. If not, go back to Anaconda install. . Having Homebrew and Anaconda allows you to easily install Key Packages needed on MacOS like the commands below are all neccessary:bash$ brew list # list packages $ brew update # update package list $ brew upgrade # upgrade packages $ brew install git # install latest git $ brew install python # install python3 for development $ python --version # version of python3 installed $ brew install java # openjdk install . Hacks . Screen shot that you have conda installed | .",
            "url": "https://jiya-sav.github.io/ourshiny/student%20teaching/2023/04/18/condascripts.html",
            "relUrl": "/student%20teaching/2023/04/18/condascripts.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Fetching and filtering data",
            "content": "Basics of Fetching . Fetching means getting data from somewhere else, like a website or database. | JavaScript is a programming language that can be used to fetch data from a website or database. | When you fetch data with JavaScript, you first need to tell it where to get the data from. This is called the URL. | Once you know the URL, you can use JavaScript to go and get the data from that URL. | When the data comes back, it&#39;s usually in a format like text or JSON. This means that you might need to do some additional work to turn the data into something that your website or application can use. | Once you have the data, you can use JavaScript to display it on your website or application. You can put it in a table, show it on a map, or do anything else you can think of. | . . About Fetching . Method . The fetching methods are in line with the CRUD (Create, Read, Update, Delete), and list as follows: . &quot;GET&quot;: Probably the most common method you would use, which is in line with &quot;read&quot;. It essentially &quot;gets&quot; the information from the API and brings it to the frontend where you are able to display it and read it. | &quot;POST&quot;: Lines up with &quot;create&quot; and adds a resource to the API. You will probably mostly be using this with your own API or if a website adds your input to an API. | &quot;PUT&quot; and &quot;PATCH&quot;: Essentially the &quot;update&quot; for API. Use &quot;PUT&quot; if you want to change the whole resource, or &quot;PATCH&quot; if you want to change just one part of a resource. | &quot;DELETE&quot;: Exactly how it sounds, deletes a resource from the API | . Popcorn Hacks: . What method should I use if I want to display some of the data stored in the backend? | What method would I use if something in the data is misspelled and I want to fix it real quick? | What method should I use if I want to add a new entry to the data? | . Filtering Data . If we want to display API data, we are going to have to filter what we want to display for multiple reasons These include making sure that the user only sees information they need to see, and not anything else | Also we need to present the information in a readable format instead of just seeing the raw data | . | . Example with Weather API . Fetching unfiltered . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;location&#34;:{&#34;city&#34;:&#34;San Diego&#34;,&#34;woeid&#34;:2487889,&#34;country&#34;:&#34;United States&#34;,&#34;lat&#34;:32.831699,&#34;long&#34;:-117.122002,&#34;timezone_id&#34;:&#34;America/Los_Angeles&#34;},&#34;current_observation&#34;:{&#34;pubDate&#34;:1682449605,&#34;wind&#34;:{&#34;chill&#34;:67,&#34;direction&#34;:&#34;North&#34;,&#34;speed&#34;:3},&#34;atmosphere&#34;:{&#34;humidity&#34;:64,&#34;visibility&#34;:9.01,&#34;pressure&#34;:1013.5},&#34;astronomy&#34;:{&#34;sunrise&#34;:&#34;6:08 AM&#34;,&#34;sunset&#34;:&#34;7:26 PM&#34;},&#34;condition&#34;:{&#34;temperature&#34;:62,&#34;text&#34;:&#34;Cloudy&#34;,&#34;code&#34;:26}},&#34;forecasts&#34;:[{&#34;day&#34;:&#34;Tue&#34;,&#34;date&#34;:1682438400,&#34;high&#34;:67,&#34;low&#34;:55,&#34;text&#34;:&#34;Mostly Clear&#34;,&#34;code&#34;:33},{&#34;day&#34;:&#34;Wed&#34;,&#34;date&#34;:1682524800,&#34;high&#34;:73,&#34;low&#34;:56,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Thu&#34;,&#34;date&#34;:1682611200,&#34;high&#34;:76,&#34;low&#34;:57,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Fri&#34;,&#34;date&#34;:1682697600,&#34;high&#34;:76,&#34;low&#34;:58,&#34;text&#34;:&#34;Mostly Sunny&#34;,&#34;code&#34;:34},{&#34;day&#34;:&#34;Sat&#34;,&#34;date&#34;:1682784000,&#34;high&#34;:77,&#34;low&#34;:59,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Sun&#34;,&#34;date&#34;:1682870400,&#34;high&#34;:75,&#34;low&#34;:59,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Mon&#34;,&#34;date&#34;:1682956800,&#34;high&#34;:64,&#34;low&#34;:54,&#34;text&#34;:&#34;Cloudy&#34;,&#34;code&#34;:26},{&#34;day&#34;:&#34;Tue&#34;,&#34;date&#34;:1683043200,&#34;high&#34;:62,&#34;low&#34;:52,&#34;text&#34;:&#34;Mostly Cloudy&#34;,&#34;code&#34;:28},{&#34;day&#34;:&#34;Wed&#34;,&#34;date&#34;:1683129600,&#34;high&#34;:60,&#34;low&#34;:53,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Thu&#34;,&#34;date&#34;:1683216000,&#34;high&#34;:62,&#34;low&#34;:51,&#34;text&#34;:&#34;Partly Cloudy&#34;,&#34;code&#34;:30},{&#34;day&#34;:&#34;Fri&#34;,&#34;date&#34;:1683302400,&#34;high&#34;:63,&#34;low&#34;:53,&#34;text&#34;:&#34;Mostly Cloudy&#34;,&#34;code&#34;:28}]} . The fetch worked and we can see all the data, but this is presented in a way that is not very readable. It also has a lot of information we didn&#39;t see. Let&#39;s say I just want to see the projected weather forecasts. . import requests url = &quot;https://yahoo-weather5.p.rapidapi.com/weather&quot; querystring = {&quot;location&quot;:&quot;San Diego&quot;,&quot;format&quot;:&quot;json&quot;,&quot;u&quot;:&quot;f&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;4abcb54450msh7468dfd72294e89p18fbaajsn6d4200063b39&quot;, &quot;X-RapidAPI-Host&quot;: &quot;yahoo-weather5.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;San Diego Weather Forecast:&quot; + &quot; n&quot;) forecast = response.json().get(&quot;forecasts&quot;) i = 0 while i &lt; len(forecast): for key, value in forecast[i].items(): print(&quot; t&quot; + key, value) i += 1 print(&quot; n&quot;) . San Diego Weather Forecast: day Tue date 1682438400 high 67 low 55 text Mostly Clear code 33 day Wed date 1682524800 high 73 low 56 text Partly Cloudy code 30 day Thu date 1682611200 high 76 low 57 text Mostly Sunny code 34 day Fri date 1682697600 high 76 low 58 text Mostly Sunny code 34 day Sat date 1682784000 high 77 low 59 text Partly Cloudy code 30 day Sun date 1682870400 high 75 low 59 text Partly Cloudy code 30 day Mon date 1682956800 high 64 low 54 text Cloudy code 26 day Tue date 1683043200 high 62 low 52 text Mostly Cloudy code 28 day Wed date 1683129600 high 60 low 53 text Partly Cloudy code 30 day Thu date 1683216000 high 62 low 51 text Partly Cloudy code 30 day Fri date 1683302400 high 63 low 53 text Mostly Cloudy code 28 . As we can see, we now can see the data in a much more organized and readable format, and we only see the forecasts, which is what we wanted to see . In Our Project . I implement more parts of our project in more detail, this is just an example of a block of code used in our project we might provide | . const response = fetch(url, { method: &quot;GET&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, mode: &quot;cors&quot;, cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39; // include, *same-origin, omit }).then(response=&gt; response.json().then( data =&gt; { console.log(data); data.forEach((item) =&gt; { console.log(&#39;ID: &#39; + item.id); console.log(&#39;Happy: &#39; + item.happy); console.log(&#39;Sad: &#39; + item.sad); console.log(&#39;Rage: &#39; + item.rage); console.log(&#39;Indian: &#39; + item.indian); console.log(&#39;Song: &#39; + item.song); . As we can see hear we are fetching from an API and... .",
            "url": "https://jiya-sav.github.io/ourshiny/fastpages/jupyter/2023/04/03/fetch-copy.html",
            "relUrl": "/fastpages/jupyter/2023/04/03/fetch-copy.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Guide To Making A New Repo",
            "content": "Duplicate APCSP, and use it as template for your own repo . | . Name your repo and include all branches before clicking the green create button. . | . If you have an automatically generated pull request, then go ahead and follow the instructions on there. If there is no pull request, as shown below, then move on to step 4. . | . Navigate to this link. Select: RSA and 4096 and leave Passphrase blank. Click the blue button Generate-SSH-Keys. You have just created an ssh key-pair. . | . Navigate to this link. Replace the section of the link highlighted in blue with your repository name. In the picture, I have inputted “ourshiny,” because it is my repository name. Replace the section of the link highlighted in yellow with your repository name that you just made. . | https://github.com/yourgithubname/yourrepositoryname/settings/secrets/actions . . Click New repository secret. Copy and paste the Private Key (generated in step 4) into the Value field. This includes the “—BEGIN RSA PRIVATE KEY—” and “–END RSA PRIVATE KEY—” portions. In the Name field, name the secret SSH_DEPLOY_KEY. Once done, click the green Add Secret button. . | . Navigate to this link, then replace the portions below with your github and repository names. My github name in the image below is jiya-sav, and my repository name is ourshiny. . | https://github.com/yourgithubname/yourrepositoryname/settings/keys . . Click the Add deploy key button. Paste your Public Key (generated in step 4) into the Key box. In the Title, name the key anything you want, for example fastpages-key. Finally, make sure you click the checkbox next to Allow write access (pictured below), and click the green Add key button to save the key. . | . . GitHub Actions will build your site, which will take 2-3 minutes to complete. This will happen anytime you push changes to the master branch of your repository. You can monitor the logs of this if you like on the Actions tab of your repo. . | Your GH-Pages Status badge on your README will eventually appear and be green, indicating your first successful build. . You can monitor the status of your site in the GitHub Pages section of your repository settings. . Now that you have made your repository secure, you can clone it into vscode and CODE, CODE, CODE!!! .",
            "url": "https://jiya-sav.github.io/ourshiny/2023/04/02/Guide-to-making-a-new-repo.html",
            "relUrl": "/2023/04/02/Guide-to-making-a-new-repo.html",
            "date": " • Apr 2, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "This site is built with fastpages . Key Links jiya . GitHub Repos: github.com/nighthawkcoders | AWS Deployments: csp.nighthawkcodingsociety.com | Slack: Join Link | 2021-2022 Archives: Fall, Early Winter, Late Winter, Spring | . .",
          "url": "https://jiya-sav.github.io/ourshiny/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jiya-sav.github.io/ourshiny/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}